{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cerve\\\\OneDrive\\\\Documentos\\\\BCNFEMTECH\\\\bftp2-proyecto-pedagogico-server\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './Styles/App.css';\nimport React, { useEffect, useState } from \"react\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Home from \"./components/Home\";\nimport { BrowserRouter, Route, Routes, Navigate } from \"react-router-dom\";\nimport AboutUs from \"./components/AboutUs\";\nimport Enquires from \"./components/Enquires\";\nimport Form from \"./components/Form\";\nimport Login from \"./components/Login\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // DeclaraciÃ³n de constantes\n  const [experiences, setExperiences] = useState([]);\n  const [experiencesToShow, setExperiencesToShow] = useState([]);\n  const [keyword, setKeyword] = useState();\n  const [reference, setReference] = useState();\n  const [requiresUpdate, setRequiresUpdate] = useState(true);\n  const [showForm, setShowForm] = useState(false);\n  const [showLoginForm, setShowLoginForm] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [user, setUser] = useState([]); // API Fetch\n\n  useEffect(() => {\n    if (requiresUpdate) {\n      fetch(\"http://localhost:8080/api/experiences\").then(r => r.json()).then(setExperiences).then(_ => setRequiresUpdate(false));\n    }\n  }, [requiresUpdate]);\n  useEffect(() => {\n    setExperiencesToShow(experiences);\n  }, [experiences]);\n\n  const deleteExperience = id => {\n    fetch(`http://localhost:8080/api/experiences/delete/${id}`, {\n      method: 'GET'\n    }).then(_ => setRequiresUpdate(true));\n  };\n\n  const addExperience = experience => {\n    fetch(\"http://localhost:8080/api/experiences\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(experience)\n    }).then(_ => setRequiresUpdate(true));\n  }; // SearchBar/Filtering function\n\n\n  const filter = e => {\n    e.preventDefault();\n    const keyword = e.target.value;\n    setKeyword(keyword);\n\n    if (keyword !== '') {\n      const results = experiences.filter(experience => {\n        reference.current.scrollIntoView();\n        return experience.name.toLowerCase().includes(keyword.toLowerCase()); // Use the toLowerCase() method to make it case-insensitive\n      });\n      setExperiencesToShow(results);\n    } else {\n      setExperiencesToShow(experiences); // If the text field is empty, show all users\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      filter: filter,\n      onButtonClicked: () => setShowForm(true),\n      user: user,\n      onLoginChange: isActive => setIsLoggedIn(isActive),\n      loggedIn: isLoggedIn,\n      experiences: experiences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), showForm && /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: e => addExperience(e),\n      onClose: () => setShowForm(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        index: true,\n        element: /*#__PURE__*/_jsxDEV(Home, {\n          loggedIn: isLoggedIn,\n          setReference: setReference,\n          keyword: keyword,\n          experiences: experiencesToShow,\n          deleteExperience: deleteExperience,\n          editExperience: addExperience\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 48\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/AboutUs\",\n        element: /*#__PURE__*/_jsxDEV(AboutUs, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 49\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), \"l\", /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/Enquires\",\n        element: /*#__PURE__*/_jsxDEV(Enquires, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 50\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"*\",\n        element: /*#__PURE__*/_jsxDEV(Navigate, {\n          replace: true,\n          to: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 42\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), showLoginForm && /*#__PURE__*/_jsxDEV(Login, {\n      onClose: () => setShowLoginForm(false),\n      onSubmit: e => setUser(e),\n      user: user,\n      setUser: setUser,\n      onLoginChange: isActive => setIsLoggedIn(isActive)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 32\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      onButtonClicked: () => setShowLoginForm(true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"d3fyihK9hDIxYz3AfDXYaAqaOmc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/cerve/OneDrive/Documentos/BCNFEMTECH/bftp2-proyecto-pedagogico-server/client/src/App.js"],"names":["React","useEffect","useState","Header","Footer","Home","BrowserRouter","Route","Routes","Navigate","AboutUs","Enquires","Form","Login","App","experiences","setExperiences","experiencesToShow","setExperiencesToShow","keyword","setKeyword","reference","setReference","requiresUpdate","setRequiresUpdate","showForm","setShowForm","showLoginForm","setShowLoginForm","isLoggedIn","setIsLoggedIn","user","setUser","fetch","then","r","json","_","deleteExperience","id","method","addExperience","experience","headers","body","JSON","stringify","filter","e","preventDefault","target","value","results","current","scrollIntoView","name","toLowerCase","includes","isActive"],"mappings":"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","sourcesContent":["import './Styles/App.css';\r\nimport React, {useEffect, useState} from \"react\";\r\nimport Header from \"./components/Header\";\r\nimport Footer from \"./components/Footer\";\r\nimport Home from \"./components/Home\";\r\nimport {BrowserRouter, Route, Routes, Navigate} from \"react-router-dom\";\r\nimport AboutUs from \"./components/AboutUs\";\r\nimport Enquires from \"./components/Enquires\";\r\nimport Form from \"./components/Form\";\r\nimport Login from \"./components/Login\";\r\n\r\nfunction App() {\r\n\r\n    // DeclaraciÃ³n de constantes\r\n\r\n    const [experiences, setExperiences] = useState([]);\r\n    const [experiencesToShow, setExperiencesToShow] = useState([]);\r\n    const [keyword, setKeyword] = useState();\r\n    const [reference, setReference] = useState()\r\n    const [requiresUpdate, setRequiresUpdate] = useState(true);\r\n    const [showForm, setShowForm] = useState(false);\r\n    const [showLoginForm, setShowLoginForm] = useState(false);\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n    const [user, setUser] = useState([]);\r\n\r\n    // API Fetch\r\n\r\n    useEffect(() => {\r\n        if (requiresUpdate) {\r\n            fetch(\"http://localhost:8080/api/experiences\")\r\n                .then(r => r.json())\r\n                .then(setExperiences)\r\n                .then(_ => setRequiresUpdate(false));\r\n        }\r\n    }, [requiresUpdate])\r\n\r\n    useEffect(() => {\r\n        setExperiencesToShow(experiences)\r\n    }, [experiences])\r\n\r\n    const deleteExperience = (id) => {\r\n        fetch(`http://localhost:8080/api/experiences/delete/${id}`,\r\n            {\r\n                method: 'GET'\r\n            }\r\n        ).then(_ => setRequiresUpdate(true))\r\n\r\n    }\r\n\r\n    const addExperience = (experience) => {\r\n        fetch(\"http://localhost:8080/api/experiences\",\r\n            {\r\n                method: 'POST',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify(experience)\r\n            }\r\n        ).then(_ => setRequiresUpdate(true))\r\n\r\n    }\r\n\r\n    // SearchBar/Filtering function\r\n\r\n    const filter = (e) => {\r\n        e.preventDefault();\r\n        const keyword = e.target.value;\r\n        setKeyword(keyword)\r\n\r\n        if (keyword !== '') {\r\n            const results = experiences.filter((experience) => {\r\n                reference.current.scrollIntoView();\r\n                return experience.name.toLowerCase().includes(keyword.toLowerCase());\r\n                // Use the toLowerCase() method to make it case-insensitive\r\n            });\r\n            setExperiencesToShow(results);\r\n        } else {\r\n            setExperiencesToShow(experiences);\r\n            // If the text field is empty, show all users\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <Header filter={filter} onButtonClicked={() => setShowForm(true)}\r\n                    user={user}   onLoginChange={ (isActive) => setIsLoggedIn(isActive)} loggedIn={isLoggedIn} experiences={experiences}/>\r\n            { showForm && <Form onSubmit={e => addExperience(e)} onClose={()=>setShowForm(false)}/>}\r\n            <Routes>\r\n                <Route path=\"/\" index element={<Home loggedIn={isLoggedIn} setReference={setReference} keyword={keyword} experiences={experiencesToShow} deleteExperience={deleteExperience} editExperience={addExperience} />}/>\r\n                <Route path=\"/AboutUs\" element={<AboutUs />} />l\r\n                <Route path=\"/Enquires\" element={<Enquires />} />\r\n                <Route path=\"*\" element={<Navigate replace to=\"/\"/>}  />\r\n            </Routes>\r\n            { showLoginForm && <Login onClose={() => setShowLoginForm(false)} onSubmit={e => setUser(e)}\r\n                                   user={user} setUser={setUser}  onLoginChange={ (isActive) => setIsLoggedIn(isActive)} />}\r\n\r\n            <Footer onButtonClicked={() => setShowLoginForm(true)}  />\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}